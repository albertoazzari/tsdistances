<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1254" onload="init(evt)" viewBox="0 0 1200 1254" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1254" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="1237.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="1237.00"> </text><svg id="frames" x="10" width="1180" total_samples="497754773432"><g><title>asm_sysvec_apic_timer_interrupt (60,023,486 samples, 0.01%)</title><rect x="0.0004%" y="1173" width="0.0121%" height="15" fill="rgb(227,0,7)" fg:x="1875635" fg:w="60023486"/><text x="0.2504%" y="1183.50"></text></g><g><title>&lt;core::iter::adapters::step_by::StepBy&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (21,684,018,982 samples, 4.36%)</title><rect x="73.3724%" y="373" width="4.3564%" height="15" fill="rgb(217,0,24)" fg:x="365214449223" fg:w="21684018982"/><text x="73.6224%" y="383.50">&lt;core..</text></g><g><title>&lt;core::iter::adapters::step_by::StepBy&lt;I&gt; as core::iter::adapters::step_by::StepByImpl&lt;I&gt;&gt;::spec_next (21,684,018,982 samples, 4.36%)</title><rect x="73.3724%" y="357" width="4.3564%" height="15" fill="rgb(221,193,54)" fg:x="365214449223" fg:w="21684018982"/><text x="73.6224%" y="367.50">&lt;core..</text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::nth (21,684,018,982 samples, 4.36%)</title><rect x="73.3724%" y="341" width="4.3564%" height="15" fill="rgb(248,212,6)" fg:x="365214449223" fg:w="21684018982"/><text x="73.6224%" y="351.50">core:..</text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_nth (21,684,018,982 samples, 4.36%)</title><rect x="73.3724%" y="325" width="4.3564%" height="15" fill="rgb(208,68,35)" fg:x="365214449223" fg:w="21684018982"/><text x="73.6224%" y="335.50">&lt;core..</text></g><g><title>&lt;isize as core::iter::range::Step&gt;::forward_checked (21,684,018,982 samples, 4.36%)</title><rect x="73.3724%" y="309" width="4.3564%" height="15" fill="rgb(232,128,0)" fg:x="365214449223" fg:w="21684018982"/><text x="73.6224%" y="319.50">&lt;isiz..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (3,465,920,110 samples, 0.70%)</title><rect x="86.2369%" y="357" width="0.6963%" height="15" fill="rgb(207,160,47)" fg:x="429248132875" fg:w="3465920110"/><text x="86.4869%" y="367.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (3,465,920,110 samples, 0.70%)</title><rect x="86.2369%" y="341" width="0.6963%" height="15" fill="rgb(228,23,34)" fg:x="429248132875" fg:w="3465920110"/><text x="86.4869%" y="351.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (3,465,920,110 samples, 0.70%)</title><rect x="86.2369%" y="325" width="0.6963%" height="15" fill="rgb(218,30,26)" fg:x="429248132875" fg:w="3465920110"/><text x="86.4869%" y="335.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (50,177,220 samples, 0.01%)</title><rect x="86.9356%" y="357" width="0.0101%" height="15" fill="rgb(220,122,19)" fg:x="432726317119" fg:w="50177220"/><text x="87.1856%" y="367.50"></text></g><g><title>sysvec_apic_timer_interrupt (50,177,220 samples, 0.01%)</title><rect x="86.9356%" y="341" width="0.0101%" height="15" fill="rgb(250,228,42)" fg:x="432726317119" fg:w="50177220"/><text x="87.1856%" y="351.50"></text></g><g><title>&lt;tsdistances::matrix::DiagonalMatrix as tsdistances::matrix::Matrix&gt;::get_diagonal_cell (45,896,650,435 samples, 9.22%)</title><rect x="77.7287%" y="373" width="9.2207%" height="15" fill="rgb(240,193,28)" fg:x="386898468205" fg:w="45896650435"/><text x="77.9787%" y="383.50">&lt;tsdistances:..</text></g><g><title>&lt;tsdistances::matrix::DiagonalMatrix as tsdistances::matrix::Matrix&gt;::set_diagonal_cell (3,324,823,895 samples, 0.67%)</title><rect x="86.9557%" y="373" width="0.6680%" height="15" fill="rgb(216,20,37)" fg:x="432826320141" fg:w="3324823895"/><text x="87.2057%" y="383.50"></text></g><g><title>asm_common_interrupt (74,228,102 samples, 0.01%)</title><rect x="87.6237%" y="373" width="0.0149%" height="15" fill="rgb(206,188,39)" fg:x="436151144036" fg:w="74228102"/><text x="87.8737%" y="383.50"></text></g><g><title>common_interrupt (74,228,102 samples, 0.01%)</title><rect x="87.6237%" y="357" width="0.0149%" height="15" fill="rgb(217,207,13)" fg:x="436151144036" fg:w="74228102"/><text x="87.8737%" y="367.50"></text></g><g><title>__common_interrupt (74,228,102 samples, 0.01%)</title><rect x="87.6237%" y="341" width="0.0149%" height="15" fill="rgb(231,73,38)" fg:x="436151144036" fg:w="74228102"/><text x="87.8737%" y="351.50"></text></g><g><title>handle_edge_irq (74,228,102 samples, 0.01%)</title><rect x="87.6237%" y="325" width="0.0149%" height="15" fill="rgb(225,20,46)" fg:x="436151144036" fg:w="74228102"/><text x="87.8737%" y="335.50"></text></g><g><title>handle_irq_event (74,228,102 samples, 0.01%)</title><rect x="87.6237%" y="309" width="0.0149%" height="15" fill="rgb(210,31,41)" fg:x="436151144036" fg:w="74228102"/><text x="87.8737%" y="319.50"></text></g><g><title>__handle_irq_event_percpu (74,228,102 samples, 0.01%)</title><rect x="87.6237%" y="293" width="0.0149%" height="15" fill="rgb(221,200,47)" fg:x="436151144036" fg:w="74228102"/><text x="87.8737%" y="303.50"></text></g><g><title>nvidia_isr (74,228,102 samples, 0.01%)</title><rect x="87.6237%" y="277" width="0.0149%" height="15" fill="rgb(226,26,5)" fg:x="436151144036" fg:w="74228102"/><text x="87.8737%" y="287.50"></text></g><g><title>rm_isr (70,049,885 samples, 0.01%)</title><rect x="87.6245%" y="261" width="0.0141%" height="15" fill="rgb(249,33,26)" fg:x="436155322253" fg:w="70049885"/><text x="87.8745%" y="271.50"></text></g><g><title>osIsr (70,049,885 samples, 0.01%)</title><rect x="87.6245%" y="245" width="0.0141%" height="15" fill="rgb(235,183,28)" fg:x="436155322253" fg:w="70049885"/><text x="87.8745%" y="255.50"></text></g><g><title>osInterruptPending.constprop.0 (65,946,221 samples, 0.01%)</title><rect x="87.6254%" y="229" width="0.0132%" height="15" fill="rgb(221,5,38)" fg:x="436159425917" fg:w="65946221"/><text x="87.8754%" y="239.50"></text></g><g><title>tick_do_update_jiffies64 (79,995,082 samples, 0.02%)</title><rect x="87.6508%" y="277" width="0.0161%" height="15" fill="rgb(247,18,42)" fg:x="436286271778" fg:w="79995082"/><text x="87.9008%" y="287.50"></text></g><g><title>update_wall_time (79,995,082 samples, 0.02%)</title><rect x="87.6508%" y="261" width="0.0161%" height="15" fill="rgb(241,131,45)" fg:x="436286271778" fg:w="79995082"/><text x="87.9008%" y="271.50"></text></g><g><title>timekeeping_advance (79,995,082 samples, 0.02%)</title><rect x="87.6508%" y="245" width="0.0161%" height="15" fill="rgb(249,31,29)" fg:x="436286271778" fg:w="79995082"/><text x="87.9008%" y="255.50"></text></g><g><title>task_tick_fair (170,758,579 samples, 0.03%)</title><rect x="87.6813%" y="245" width="0.0343%" height="15" fill="rgb(225,111,53)" fg:x="436437709616" fg:w="170758579"/><text x="87.9313%" y="255.50"></text></g><g><title>update_load_avg (95,319,775 samples, 0.02%)</title><rect x="87.6964%" y="229" width="0.0191%" height="15" fill="rgb(238,160,17)" fg:x="436513148420" fg:w="95319775"/><text x="87.9464%" y="239.50"></text></g><g><title>sched_tick (234,293,423 samples, 0.05%)</title><rect x="87.6715%" y="261" width="0.0471%" height="15" fill="rgb(214,148,48)" fg:x="436389019678" fg:w="234293423"/><text x="87.9215%" y="271.50"></text></g><g><title>tick_nohz_handler (374,590,561 samples, 0.08%)</title><rect x="87.6456%" y="293" width="0.0753%" height="15" fill="rgb(232,36,49)" fg:x="436259943252" fg:w="374590561"/><text x="87.8956%" y="303.50"></text></g><g><title>update_process_times (268,266,953 samples, 0.05%)</title><rect x="87.6669%" y="277" width="0.0539%" height="15" fill="rgb(209,103,24)" fg:x="436366266860" fg:w="268266953"/><text x="87.9169%" y="287.50"></text></g><g><title>__hrtimer_run_queues (404,963,521 samples, 0.08%)</title><rect x="87.6402%" y="309" width="0.0814%" height="15" fill="rgb(229,88,8)" fg:x="436233234471" fg:w="404963521"/><text x="87.8902%" y="319.50"></text></g><g><title>__sysvec_apic_timer_interrupt (457,737,340 samples, 0.09%)</title><rect x="87.6386%" y="341" width="0.0920%" height="15" fill="rgb(213,181,19)" fg:x="436225372138" fg:w="457737340"/><text x="87.8886%" y="351.50"></text></g><g><title>hrtimer_interrupt (449,875,007 samples, 0.09%)</title><rect x="87.6402%" y="325" width="0.0904%" height="15" fill="rgb(254,191,54)" fg:x="436233234471" fg:w="449875007"/><text x="87.8902%" y="335.50"></text></g><g><title>krcWatchdogCallbackVblankRecovery_IMPL (57,397,163 samples, 0.01%)</title><rect x="87.7382%" y="101" width="0.0115%" height="15" fill="rgb(241,83,37)" fg:x="436720989145" fg:w="57397163"/><text x="87.9882%" y="111.50"></text></g><g><title>kheadReadVblankIntrState_IMPL (57,397,163 samples, 0.01%)</title><rect x="87.7382%" y="85" width="0.0115%" height="15" fill="rgb(233,36,39)" fg:x="436720989145" fg:w="57397163"/><text x="87.9882%" y="95.50"></text></g><g><title>kheadGetDisplayInitialized_KERNEL (57,397,163 samples, 0.01%)</title><rect x="87.7382%" y="69" width="0.0115%" height="15" fill="rgb(226,3,54)" fg:x="436720989145" fg:w="57397163"/><text x="87.9882%" y="79.50"></text></g><g><title>_regRead (57,397,163 samples, 0.01%)</title><rect x="87.7382%" y="53" width="0.0115%" height="15" fill="rgb(245,192,40)" fg:x="436720989145" fg:w="57397163"/><text x="87.9882%" y="63.50"></text></g><g><title>osDevReadReg032 (57,397,163 samples, 0.01%)</title><rect x="87.7382%" y="37" width="0.0115%" height="15" fill="rgb(238,167,29)" fg:x="436720989145" fg:w="57397163"/><text x="87.9882%" y="47.50"></text></g><g><title>nv_timer_callback_typed_data (64,769,991 samples, 0.01%)</title><rect x="87.7382%" y="181" width="0.0130%" height="15" fill="rgb(232,182,51)" fg:x="436720989145" fg:w="64769991"/><text x="87.9882%" y="191.50"></text></g><g><title>nvidia_rc_timer_callback (64,769,991 samples, 0.01%)</title><rect x="87.7382%" y="165" width="0.0130%" height="15" fill="rgb(231,60,39)" fg:x="436720989145" fg:w="64769991"/><text x="87.9882%" y="175.50"></text></g><g><title>rm_run_rc_callback (64,769,991 samples, 0.01%)</title><rect x="87.7382%" y="149" width="0.0130%" height="15" fill="rgb(208,69,12)" fg:x="436720989145" fg:w="64769991"/><text x="87.9882%" y="159.50"></text></g><g><title>osRun1HzCallbacksNow (64,769,991 samples, 0.01%)</title><rect x="87.7382%" y="133" width="0.0130%" height="15" fill="rgb(235,93,37)" fg:x="436720989145" fg:w="64769991"/><text x="87.9882%" y="143.50"></text></g><g><title>_osRunAll1HzCallbacks (64,769,991 samples, 0.01%)</title><rect x="87.7382%" y="117" width="0.0130%" height="15" fill="rgb(213,116,39)" fg:x="436720989145" fg:w="64769991"/><text x="87.9882%" y="127.50"></text></g><g><title>handle_softirqs (106,384,386 samples, 0.02%)</title><rect x="87.7313%" y="309" width="0.0214%" height="15" fill="rgb(222,207,29)" fg:x="436686796864" fg:w="106384386"/><text x="87.9813%" y="319.50"></text></g><g><title>run_timer_softirq (87,381,152 samples, 0.02%)</title><rect x="87.7351%" y="293" width="0.0176%" height="15" fill="rgb(206,96,30)" fg:x="436705800098" fg:w="87381152"/><text x="87.9851%" y="303.50"></text></g><g><title>tmigr_handle_remote (87,381,152 samples, 0.02%)</title><rect x="87.7351%" y="277" width="0.0176%" height="15" fill="rgb(218,138,4)" fg:x="436705800098" fg:w="87381152"/><text x="87.9851%" y="287.50"></text></g><g><title>tmigr_handle_remote_up (87,381,152 samples, 0.02%)</title><rect x="87.7351%" y="261" width="0.0176%" height="15" fill="rgb(250,191,14)" fg:x="436705800098" fg:w="87381152"/><text x="87.9851%" y="271.50"></text></g><g><title>tmigr_handle_remote_cpu (83,210,927 samples, 0.02%)</title><rect x="87.7360%" y="245" width="0.0167%" height="15" fill="rgb(239,60,40)" fg:x="436709970323" fg:w="83210927"/><text x="87.9860%" y="255.50"></text></g><g><title>timer_expire_remote (83,210,927 samples, 0.02%)</title><rect x="87.7360%" y="229" width="0.0167%" height="15" fill="rgb(206,27,48)" fg:x="436709970323" fg:w="83210927"/><text x="87.9860%" y="239.50"></text></g><g><title>__run_timers (83,210,927 samples, 0.02%)</title><rect x="87.7360%" y="213" width="0.0167%" height="15" fill="rgb(225,35,8)" fg:x="436709970323" fg:w="83210927"/><text x="87.9860%" y="223.50"></text></g><g><title>call_timer_fn (79,452,092 samples, 0.02%)</title><rect x="87.7367%" y="197" width="0.0160%" height="15" fill="rgb(250,213,24)" fg:x="436713729158" fg:w="79452092"/><text x="87.9867%" y="207.50"></text></g><g><title>irq_exit_rcu (110,092,612 samples, 0.02%)</title><rect x="87.7313%" y="341" width="0.0221%" height="15" fill="rgb(247,123,22)" fg:x="436686796864" fg:w="110092612"/><text x="87.9813%" y="351.50"></text></g><g><title>__irq_exit_rcu (110,092,612 samples, 0.02%)</title><rect x="87.7313%" y="325" width="0.0221%" height="15" fill="rgb(231,138,38)" fg:x="436686796864" fg:w="110092612"/><text x="87.9813%" y="335.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (594,974,009 samples, 0.12%)</title><rect x="87.6386%" y="373" width="0.1195%" height="15" fill="rgb(231,145,46)" fg:x="436225372138" fg:w="594974009"/><text x="87.8886%" y="383.50"></text></g><g><title>sysvec_apic_timer_interrupt (594,974,009 samples, 0.12%)</title><rect x="87.6386%" y="357" width="0.1195%" height="15" fill="rgb(251,118,11)" fg:x="436225372138" fg:w="594974009"/><text x="87.8886%" y="367.50"></text></g><g><title>asm_sysvec_thermal (56,113,634 samples, 0.01%)</title><rect x="87.7619%" y="373" width="0.0113%" height="15" fill="rgb(217,147,25)" fg:x="436839268096" fg:w="56113634"/><text x="88.0119%" y="383.50"></text></g><g><title>sysvec_thermal (52,427,768 samples, 0.01%)</title><rect x="87.7627%" y="357" width="0.0105%" height="15" fill="rgb(247,81,37)" fg:x="436842953962" fg:w="52427768"/><text x="88.0127%" y="367.50"></text></g><g><title>__sysvec_thermal (52,427,768 samples, 0.01%)</title><rect x="87.7627%" y="341" width="0.0105%" height="15" fill="rgb(209,12,38)" fg:x="436842953962" fg:w="52427768"/><text x="88.0127%" y="351.50"></text></g><g><title>intel_thermal_interrupt (52,427,768 samples, 0.01%)</title><rect x="87.7627%" y="325" width="0.0105%" height="15" fill="rgb(227,1,9)" fg:x="436842953962" fg:w="52427768"/><text x="88.0127%" y="335.50"></text></g><g><title>__hrtimer_run_queues (54,457,271 samples, 0.01%)</title><rect x="99.9760%" y="277" width="0.0109%" height="15" fill="rgb(248,47,43)" fg:x="497635243870" fg:w="54457271"/><text x="100.2260%" y="287.50"></text></g><g><title>tick_nohz_handler (50,769,682 samples, 0.01%)</title><rect x="99.9767%" y="261" width="0.0102%" height="15" fill="rgb(221,10,30)" fg:x="497638931459" fg:w="50769682"/><text x="100.2267%" y="271.50"></text></g><g><title>__sysvec_apic_timer_interrupt (62,296,111 samples, 0.01%)</title><rect x="99.9760%" y="309" width="0.0125%" height="15" fill="rgb(210,229,1)" fg:x="497635243870" fg:w="62296111"/><text x="100.2260%" y="319.50"></text></g><g><title>hrtimer_interrupt (62,296,111 samples, 0.01%)</title><rect x="99.9760%" y="293" width="0.0125%" height="15" fill="rgb(222,148,37)" fg:x="497635243870" fg:w="62296111"/><text x="100.2260%" y="303.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (66,464,241 samples, 0.01%)</title><rect x="99.9760%" y="341" width="0.0134%" height="15" fill="rgb(234,67,33)" fg:x="497635243870" fg:w="66464241"/><text x="100.2260%" y="351.50"></text></g><g><title>sysvec_apic_timer_interrupt (66,464,241 samples, 0.01%)</title><rect x="99.9760%" y="325" width="0.0134%" height="15" fill="rgb(247,98,35)" fg:x="497635243870" fg:w="66464241"/><text x="100.2260%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (497,636,327,376 samples, 99.98%)</title><rect x="0.0140%" y="533" width="99.9762%" height="15" fill="rgb(247,138,52)" fg:x="69468506" fg:w="497636327376"/><text x="0.2640%" y="543.50">&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (497,636,327,376 samples, 99.98%)</title><rect x="0.0140%" y="517" width="99.9762%" height="15" fill="rgb(213,79,30)" fg:x="69468506" fg:w="497636327376"/><text x="0.2640%" y="527.50">alloc::vec::Vec&lt;T,A&gt;::extend_trusted</text></g><g><title>core::iter::traits::iterator::Iterator::for_each (497,636,327,376 samples, 99.98%)</title><rect x="0.0140%" y="501" width="99.9762%" height="15" fill="rgb(246,177,23)" fg:x="69468506" fg:w="497636327376"/><text x="0.2640%" y="511.50">core::iter::traits::iterator::Iterator::for_each</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (497,636,327,376 samples, 99.98%)</title><rect x="0.0140%" y="485" width="99.9762%" height="15" fill="rgb(230,62,27)" fg:x="69468506" fg:w="497636327376"/><text x="0.2640%" y="495.50">&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (497,636,327,376 samples, 99.98%)</title><rect x="0.0140%" y="469" width="99.9762%" height="15" fill="rgb(216,154,8)" fg:x="69468506" fg:w="497636327376"/><text x="0.2640%" y="479.50">&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold</text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (497,636,327,376 samples, 99.98%)</title><rect x="0.0140%" y="453" width="99.9762%" height="15" fill="rgb(244,35,45)" fg:x="69468506" fg:w="497636327376"/><text x="0.2640%" y="463.50">core::iter::adapters::map::map_fold::_{{closure}}</text></g><g><title>tsdistances::distances::compute_distance::_{{closure}}::_{{closure}} (497,632,151,196 samples, 99.98%)</title><rect x="0.0148%" y="437" width="99.9754%" height="15" fill="rgb(251,115,12)" fg:x="73644686" fg:w="497632151196"/><text x="0.2648%" y="447.50">tsdistances::distances::compute_distance::_{{closure}}::_{{closure}}</text></g><g><title>tsdistances::distances::test_twe::_{{closure}} (497,632,151,196 samples, 99.98%)</title><rect x="0.0148%" y="421" width="99.9754%" height="15" fill="rgb(240,54,50)" fg:x="73644686" fg:w="497632151196"/><text x="0.2648%" y="431.50">tsdistances::distances::test_twe::_{{closure}}</text></g><g><title>tsdistances::diagonal::diagonal_distance (497,632,151,196 samples, 99.98%)</title><rect x="0.0148%" y="405" width="99.9754%" height="15" fill="rgb(233,84,52)" fg:x="73644686" fg:w="497632151196"/><text x="0.2648%" y="415.50">tsdistances::diagonal::diagonal_distance</text></g><g><title>tsdistances::diagonal::diagonal_distance_ (497,632,151,196 samples, 99.98%)</title><rect x="0.0148%" y="389" width="99.9754%" height="15" fill="rgb(207,117,47)" fg:x="73644686" fg:w="497632151196"/><text x="0.2648%" y="399.50">tsdistances::diagonal::diagonal_distance_</text></g><g><title>tsdistances::diagonal::diagonal_distance::_{{closure}} (60,765,676,515 samples, 12.21%)</title><rect x="87.7822%" y="373" width="12.2080%" height="15" fill="rgb(249,43,39)" fg:x="436940119367" fg:w="60765676515"/><text x="88.0322%" y="383.50">tsdistances::diago..</text></g><g><title>tsdistances::distances::twe::_{{closure}}::_{{closure}} (55,831,275,064 samples, 11.22%)</title><rect x="88.7735%" y="357" width="11.2166%" height="15" fill="rgb(209,38,44)" fg:x="441874520818" fg:w="55831275064"/><text x="89.0235%" y="367.50">tsdistances::dist..</text></g><g><title>tsdistances::distances::compute_distance (497,640,014,720 samples, 99.98%)</title><rect x="0.0140%" y="789" width="99.9769%" height="15" fill="rgb(236,212,23)" fg:x="69468506" fg:w="497640014720"/><text x="0.2640%" y="799.50">tsdistances::distances::compute_distance</text></g><g><title>core::iter::traits::iterator::Iterator::collect (497,640,014,720 samples, 99.98%)</title><rect x="0.0140%" y="773" width="99.9769%" height="15" fill="rgb(242,79,21)" fg:x="69468506" fg:w="497640014720"/><text x="0.2640%" y="783.50">core::iter::traits::iterator::Iterator::collect</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (497,640,014,720 samples, 99.98%)</title><rect x="0.0140%" y="757" width="99.9769%" height="15" fill="rgb(211,96,35)" fg:x="69468506" fg:w="497640014720"/><text x="0.2640%" y="767.50">&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (497,640,014,720 samples, 99.98%)</title><rect x="0.0140%" y="741" width="99.9769%" height="15" fill="rgb(253,215,40)" fg:x="69468506" fg:w="497640014720"/><text x="0.2640%" y="751.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (497,640,014,720 samples, 99.98%)</title><rect x="0.0140%" y="725" width="99.9769%" height="15" fill="rgb(211,81,21)" fg:x="69468506" fg:w="497640014720"/><text x="0.2640%" y="735.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (497,640,014,720 samples, 99.98%)</title><rect x="0.0140%" y="709" width="99.9769%" height="15" fill="rgb(208,190,38)" fg:x="69468506" fg:w="497640014720"/><text x="0.2640%" y="719.50">&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (497,640,014,720 samples, 99.98%)</title><rect x="0.0140%" y="693" width="99.9769%" height="15" fill="rgb(235,213,38)" fg:x="69468506" fg:w="497640014720"/><text x="0.2640%" y="703.50">alloc::vec::Vec&lt;T,A&gt;::extend_trusted</text></g><g><title>core::iter::traits::iterator::Iterator::for_each (497,640,014,720 samples, 99.98%)</title><rect x="0.0140%" y="677" width="99.9769%" height="15" fill="rgb(237,122,38)" fg:x="69468506" fg:w="497640014720"/><text x="0.2640%" y="687.50">core::iter::traits::iterator::Iterator::for_each</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (497,640,014,720 samples, 99.98%)</title><rect x="0.0140%" y="661" width="99.9769%" height="15" fill="rgb(244,218,35)" fg:x="69468506" fg:w="497640014720"/><text x="0.2640%" y="671.50">&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (497,640,014,720 samples, 99.98%)</title><rect x="0.0140%" y="645" width="99.9769%" height="15" fill="rgb(240,68,47)" fg:x="69468506" fg:w="497640014720"/><text x="0.2640%" y="655.50">&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold</text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (497,640,014,720 samples, 99.98%)</title><rect x="0.0140%" y="629" width="99.9769%" height="15" fill="rgb(210,16,53)" fg:x="69468506" fg:w="497640014720"/><text x="0.2640%" y="639.50">core::iter::adapters::map::map_fold::_{{closure}}</text></g><g><title>tsdistances::distances::compute_distance::_{{closure}} (497,640,014,720 samples, 99.98%)</title><rect x="0.0140%" y="613" width="99.9769%" height="15" fill="rgb(235,124,12)" fg:x="69468506" fg:w="497640014720"/><text x="0.2640%" y="623.50">tsdistances::distances::compute_distance::_{{closure}}</text></g><g><title>core::iter::traits::iterator::Iterator::collect (497,640,014,720 samples, 99.98%)</title><rect x="0.0140%" y="597" width="99.9769%" height="15" fill="rgb(224,169,11)" fg:x="69468506" fg:w="497640014720"/><text x="0.2640%" y="607.50">core::iter::traits::iterator::Iterator::collect</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (497,640,014,720 samples, 99.98%)</title><rect x="0.0140%" y="581" width="99.9769%" height="15" fill="rgb(250,166,2)" fg:x="69468506" fg:w="497640014720"/><text x="0.2640%" y="591.50">&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (497,640,014,720 samples, 99.98%)</title><rect x="0.0140%" y="565" width="99.9769%" height="15" fill="rgb(242,216,29)" fg:x="69468506" fg:w="497640014720"/><text x="0.2640%" y="575.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (497,640,014,720 samples, 99.98%)</title><rect x="0.0140%" y="549" width="99.9769%" height="15" fill="rgb(230,116,27)" fg:x="69468506" fg:w="497640014720"/><text x="0.2640%" y="559.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter</text></g><g><title>distances::test (497,752,169,889 samples, 100.00%)</title><rect x="0.0000%" y="1189" width="99.9995%" height="15" fill="rgb(228,99,48)" fg:x="0" fg:w="497752169889"/><text x="0.2500%" y="1199.50">distances::test</text></g><g><title>clone3 (497,682,701,383 samples, 99.99%)</title><rect x="0.0140%" y="1173" width="99.9855%" height="15" fill="rgb(253,11,6)" fg:x="69468506" fg:w="497682701383"/><text x="0.2640%" y="1183.50">clone3</text></g><g><title>start_thread (497,682,701,383 samples, 99.99%)</title><rect x="0.0140%" y="1157" width="99.9855%" height="15" fill="rgb(247,143,39)" fg:x="69468506" fg:w="497682701383"/><text x="0.2640%" y="1167.50">start_thread</text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (497,682,701,383 samples, 99.99%)</title><rect x="0.0140%" y="1141" width="99.9855%" height="15" fill="rgb(236,97,10)" fg:x="69468506" fg:w="497682701383"/><text x="0.2640%" y="1151.50">std::sys::pal::unix::thread::Thread::new::thread_start</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (497,682,701,383 samples, 99.99%)</title><rect x="0.0140%" y="1125" width="99.9855%" height="15" fill="rgb(233,208,19)" fg:x="69468506" fg:w="497682701383"/><text x="0.2640%" y="1135.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>std::thread::Builder::spawn_unchecked_::_{{closure}} (497,682,701,383 samples, 99.99%)</title><rect x="0.0140%" y="1109" width="99.9855%" height="15" fill="rgb(216,164,2)" fg:x="69468506" fg:w="497682701383"/><text x="0.2640%" y="1119.50">std::thread::Builder::spawn_unchecked_::_{{closure}}</text></g><g><title>std::panic::catch_unwind (497,682,701,383 samples, 99.99%)</title><rect x="0.0140%" y="1093" width="99.9855%" height="15" fill="rgb(220,129,5)" fg:x="69468506" fg:w="497682701383"/><text x="0.2640%" y="1103.50">std::panic::catch_unwind</text></g><g><title>std::panicking::catch_unwind (497,682,701,383 samples, 99.99%)</title><rect x="0.0140%" y="1077" width="99.9855%" height="15" fill="rgb(242,17,10)" fg:x="69468506" fg:w="497682701383"/><text x="0.2640%" y="1087.50">std::panicking::catch_unwind</text></g><g><title>std::panicking::catch_unwind::do_call (497,682,701,383 samples, 99.99%)</title><rect x="0.0140%" y="1061" width="99.9855%" height="15" fill="rgb(242,107,0)" fg:x="69468506" fg:w="497682701383"/><text x="0.2640%" y="1071.50">std::panicking::catch_unwind::do_call</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (497,682,701,383 samples, 99.99%)</title><rect x="0.0140%" y="1045" width="99.9855%" height="15" fill="rgb(251,28,31)" fg:x="69468506" fg:w="497682701383"/><text x="0.2640%" y="1055.50">&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once</text></g><g><title>std::thread::Builder::spawn_unchecked_::_{{closure}}::_{{closure}} (497,682,701,383 samples, 99.99%)</title><rect x="0.0140%" y="1029" width="99.9855%" height="15" fill="rgb(233,223,10)" fg:x="69468506" fg:w="497682701383"/><text x="0.2640%" y="1039.50">std::thread::Builder::spawn_unchecked_::_{{closure}}::_{{closure}}</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (497,682,701,383 samples, 99.99%)</title><rect x="0.0140%" y="1013" width="99.9855%" height="15" fill="rgb(215,21,27)" fg:x="69468506" fg:w="497682701383"/><text x="0.2640%" y="1023.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>test::run_test::_{{closure}} (497,682,701,383 samples, 99.99%)</title><rect x="0.0140%" y="997" width="99.9855%" height="15" fill="rgb(232,23,21)" fg:x="69468506" fg:w="497682701383"/><text x="0.2640%" y="1007.50">test::run_test::_{{closure}}</text></g><g><title>test::run_test::_{{closure}} (497,682,701,383 samples, 99.99%)</title><rect x="0.0140%" y="981" width="99.9855%" height="15" fill="rgb(244,5,23)" fg:x="69468506" fg:w="497682701383"/><text x="0.2640%" y="991.50">test::run_test::_{{closure}}</text></g><g><title>test::run_test_in_process (497,682,701,383 samples, 99.99%)</title><rect x="0.0140%" y="965" width="99.9855%" height="15" fill="rgb(226,81,46)" fg:x="69468506" fg:w="497682701383"/><text x="0.2640%" y="975.50">test::run_test_in_process</text></g><g><title>std::panic::catch_unwind (497,682,701,383 samples, 99.99%)</title><rect x="0.0140%" y="949" width="99.9855%" height="15" fill="rgb(247,70,30)" fg:x="69468506" fg:w="497682701383"/><text x="0.2640%" y="959.50">std::panic::catch_unwind</text></g><g><title>std::panicking::catch_unwind (497,682,701,383 samples, 99.99%)</title><rect x="0.0140%" y="933" width="99.9855%" height="15" fill="rgb(212,68,19)" fg:x="69468506" fg:w="497682701383"/><text x="0.2640%" y="943.50">std::panicking::catch_unwind</text></g><g><title>std::panicking::catch_unwind::do_call (497,682,701,383 samples, 99.99%)</title><rect x="0.0140%" y="917" width="99.9855%" height="15" fill="rgb(240,187,13)" fg:x="69468506" fg:w="497682701383"/><text x="0.2640%" y="927.50">std::panicking::catch_unwind::do_call</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (497,682,701,383 samples, 99.99%)</title><rect x="0.0140%" y="901" width="99.9855%" height="15" fill="rgb(223,113,26)" fg:x="69468506" fg:w="497682701383"/><text x="0.2640%" y="911.50">&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once</text></g><g><title>test::run_test_in_process::_{{closure}} (497,682,701,383 samples, 99.99%)</title><rect x="0.0140%" y="885" width="99.9855%" height="15" fill="rgb(206,192,2)" fg:x="69468506" fg:w="497682701383"/><text x="0.2640%" y="895.50">test::run_test_in_process::_{{closure}}</text></g><g><title>test::__rust_begin_short_backtrace (497,682,701,383 samples, 99.99%)</title><rect x="0.0140%" y="869" width="99.9855%" height="15" fill="rgb(241,108,4)" fg:x="69468506" fg:w="497682701383"/><text x="0.2640%" y="879.50">test::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (497,682,701,383 samples, 99.99%)</title><rect x="0.0140%" y="853" width="99.9855%" height="15" fill="rgb(247,173,49)" fg:x="69468506" fg:w="497682701383"/><text x="0.2640%" y="863.50">core::ops::function::FnOnce::call_once</text></g><g><title>core::ops::function::FnOnce::call_once (497,682,701,383 samples, 99.99%)</title><rect x="0.0140%" y="837" width="99.9855%" height="15" fill="rgb(224,114,35)" fg:x="69468506" fg:w="497682701383"/><text x="0.2640%" y="847.50">core::ops::function::FnOnce::call_once</text></g><g><title>tsdistances::distances::test_twe::_{{closure}} (497,682,701,383 samples, 99.99%)</title><rect x="0.0140%" y="821" width="99.9855%" height="15" fill="rgb(245,159,27)" fg:x="69468506" fg:w="497682701383"/><text x="0.2640%" y="831.50">tsdistances::distances::test_twe::_{{closure}}</text></g><g><title>tsdistances::distances::test_twe (497,682,701,383 samples, 99.99%)</title><rect x="0.0140%" y="805" width="99.9855%" height="15" fill="rgb(245,172,44)" fg:x="69468506" fg:w="497682701383"/><text x="0.2640%" y="815.50">tsdistances::distances::test_twe</text></g><g><title>all (497,754,773,432 samples, 100%)</title><rect x="0.0000%" y="1205" width="100.0000%" height="15" fill="rgb(236,23,11)" fg:x="0" fg:w="497754773432"/><text x="0.2500%" y="1215.50"></text></g></svg></svg>